summ <- uvoz_tabel("summary")
trade_data <- uvoz_tabel("trade_data")
View(financial)
View(j)
View(k)
View(prices)
View(summ)
View(trade_data)
write.csv(financial, 'podatki/csv/financial.csv', row.names = FALSE)
write.csv(trade_data, 'podatki/csv/trade_data.csv', row.names = FALSE)
source('~/GitHub/projekt-napredni-pristopi-R/uvoz.R')
source('~/GitHub/projekt-napredni-pristopi-R/uvoz.R')
View(financial)
head(financial)
head(financial)[,-1]
head(financial)[,-5]
head(financial)[,-4]
head(financial)[,-6]
dim(financial)
head(financial)[,-7]
financial <- uvoz_tabele("financial")[,-7]
View(financial)
View(fundamentals)
View(prices)
View(summ)
View(trade_data)
View(summ)
View(prices)
View(trade_data)
source('~/GitHub/projekt-napredni-pristopi-R/uvoz.R')
View(financial)
View(fundamentals)
View(prices)
View(trade_data)
source('~/GitHub/projekt-napredni-pristopi-R/uvoz.R')
source('~/.active-rstudio-document')
View(fundamentals)
source('~/GitHub/projekt-napredni-pristopi-R/uvoz.R')
source('~/.active-rstudio-document')
View(financial)
source('~/.active-rstudio-document')
View(financial)
View(fundamentals)
source('~/.active-rstudio-document')
View(fundamentals)
source('~/.active-rstudio-document')
View(fundamentals)
View(financial)
source('~/.active-rstudio-document')
View(fundamentals)
source('~/.active-rstudio-document')
source('~/GitHub/projekt-napredni-pristopi-R/uvoz.R')
source('~/.active-rstudio-document')
View(fund)
source('~/.active-rstudio-document')
View(fund)
View(fundamentals)
price <-ustvari_tabelo('prices')
View(price)
source('~/.active-rstudio-document')
View(price)
source('~/.active-rstudio-document')
View(fund)
source('~/.active-rstudio-document')
View(fund)
source('~/.active-rstudio-document')
View(price)
source('~/.active-rstudio-document')
View(fund)
View(financial)
source('~/.active-rstudio-document')
source('uvoz/uvoz_csv.R', encoding='UTF-8')
View(fin)
View(fund)
View(price)
View(sum)
View(trade)
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
View(fin)
View(fund)
View(price)
View(sum)
View(trade)
source('G:/VID/fmf/napredni pristopi v R/projekt/projekt.R')
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
View(fin)
View(fund)
View(price)
View(sum)
View(trade)
source('~/GitHub/projekt-napredni-pristopi-R/uvoz/uvoz.R')
source('~/GitHub/projekt-napredni-pristopi-R/uvoz/uvoz_csv.R')
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
View(fin)
source('~/GitHub/projekt-napredni-pristopi-R/uvoz/uvoz.R')
source('~/GitHub/projekt-napredni-pristopi-R/uvoz/uvoz_csv.R')
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
View(fin)
colnames(fin) <- c('Epic', 'Name', 'Revenue(m)', 'Pretax_profit(m)', 'EPS(p)', 'ROCE(%)', 'Cash_and_eguiv(m)')
View(fin)
fund[1,3]
fund[1,4]
fund[1,5]
fund[1,5]+ 4
fin$`Revenue(m)`<- as.numeric(gsub(",","",fin$`Revenue(m)`))
View(fin)
fin$`Pretax_profit(m)`<- as.numeric(gsub(",","",fin$`Pretax_profit(m)`))
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
colnames(fin) <- c('Epic', 'Name', 'Revenue(m)', 'Pretax_profit(m)', 'EPS(p)', 'ROCE(%)', 'Cash_and_Eguiv(m)')
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
source('~/GitHub/projekt-napredni-pristopi-R/projekt.R')
View(fin)
View(fund)
View(price)
View(sum)
View(trade)
source('G:/VID/fmf/napredni pristopi v R/projekt/projekt.R')
View(fin)
source('G:/VID/fmf/napredni pristopi v R/projekt/uvoz/uvoz.R')
View(financial)
source('G:/VID/fmf/napredni pristopi v R/projekt/projekt.R')
View(fin)
shiny::runApp()
?hist
View(price)
runApp()
runApp()
?bind
??bind
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
??bind
?barplot
runApp()
runApp()
?coordinates
??coord_map
runApp()
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp()
runApp()
runApp()
runApp()
price$`TodayChg(%)`>0
price$`TodayChg(%)`[price$`TodayChg(%)`>0]
price$`TodayChg(%)`[price$`TodayChg(%)`>=0]
price$`TodayChg(%)`[price$`TodayChg(%)`<=0]
which(price$`TodayChg(%)`[price$`TodayChg(%)`>=0])
which(price$`TodayChg(%)`>=0)
price$Epic[which(price$`TodayChg(%)`>=0)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
price$`TodayChg(%)`[price$`TodayChg(%)`<0] & price$`TodayChg(%)`[price$`TodayChg(%)`>-0.5]
price$`TodayChg(%)`[price$`TodayChg(%)`<0 & price$`TodayChg(%)`>-0.5]
runApp()
shiny::runApp()
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp()
runApp()
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('G:/VID/fmf/napredni pristopi v R/vaja2')
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(plotly)
install.packages("plotly")
shiny::runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y=price$`TodayChg(%)`[price$`TodayChg(%)`>=0],type='bar')%>% layout(title="Današnje spremembe različnih delnic")}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?distribution
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
x<-price$`TodayChg(%)`
density(x)
density(x)[1]
density(x)
density(x)[y]
density(x)$y
which(density(x)$y==max(density(x)$y))
max(density(x)$y)
runApp()
runApp()
runApp()
runApp()
range(0,1)
runApp()
?scale
runApp()
runApp()
hist$y
hist(x)
frequency(hist(x))
hist$frequency
x<-price$`TodayChg(%)`
hist(x)
frequency(x)
hist(x)$breaks
hist(x)$density
runApp()
runApp()
runApp()
hist(x)$density
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??layount
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(plotly.graph_objs)
runApp()
runApp()
runApp()
runApp()
?dict
??dict
runApp()
runApp()
?plotly::layout
?plotly::layout::titlefont
?plotly::layout::title
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
?hist::font
shiny::runApp()
runApp()
runApp()
runApp()
install.packages(showtext)
install.packages("showtext")
runApp()
source('G:/VID/fmf/napredni pristopi v R/projekt/projekt.R')
runApp()
runApp()
runApp()
?hist::title
??title
runApp()
runApp()
runApp()
?windowsFonts
runApp()
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
windowsFonts("Arial")
windowsFonts("Arial Black")
library(grDevices)
windowsFonts("Arial Black")
windowsFonts("Arial")
windowsFont("Arial")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
plotly::title
?plotly::title
??plotly::title
?plotly
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wellPanel
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
x<-price$`TodayChg(%)`
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(input$bins) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
runApp()
hist(x)$density
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
hist$density
runApp()
runApp()
runApp()
runApp()
runApp()
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
hist(x,probability = TRUE)$density
max(hist(x,probability = TRUE)$density)
x<-price$`TodayChg(%)`
max(density(x))
density(x)
density(x)$max
density(x)$y
max(density(x)$y)
runApp()
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(input$bins) + 1),probability=TRUE,
main="",plot=FALSE)
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="",plot=FALSE)
yhist
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
yhist
max(yhist(x)$density)
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
max(yhist(x)$density)
max(yhist$density)
runApp()
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="",plot=FALSE)
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,main="")
yhist
x<-price$`TodayChg(%)`
max(density)
max(density$y)
density(x)
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
hist$count
hist$counts
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,main="")
yhist$counts
yhist$density
max(density(x)y)
max(density(x)$y)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
