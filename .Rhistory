price$`TodayChg(%)`[price$`TodayChg(%)`<0] & price$`TodayChg(%)`[price$`TodayChg(%)`>-0.5]
price$`TodayChg(%)`[price$`TodayChg(%)`<0 & price$`TodayChg(%)`>-0.5]
runApp()
shiny::runApp()
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp()
runApp()
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('G:/VID/fmf/napredni pristopi v R/vaja2')
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(plotly)
install.packages("plotly")
shiny::runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y=price$`TodayChg(%)`[price$`TodayChg(%)`>=0],type='bar')%>% layout(title="Današnje spremembe različnih delnic")}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?distribution
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
x<-price$`TodayChg(%)`
density(x)
density(x)[1]
density(x)
density(x)[y]
density(x)$y
which(density(x)$y==max(density(x)$y))
max(density(x)$y)
runApp()
runApp()
runApp()
runApp()
range(0,1)
runApp()
?scale
runApp()
runApp()
hist$y
hist(x)
frequency(hist(x))
hist$frequency
x<-price$`TodayChg(%)`
hist(x)
frequency(x)
hist(x)$breaks
hist(x)$density
runApp()
runApp()
runApp()
hist(x)$density
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??layount
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(plotly.graph_objs)
runApp()
runApp()
runApp()
runApp()
?dict
??dict
runApp()
runApp()
?plotly::layout
?plotly::layout::titlefont
?plotly::layout::title
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
?hist::font
shiny::runApp()
runApp()
runApp()
runApp()
install.packages(showtext)
install.packages("showtext")
runApp()
source('G:/VID/fmf/napredni pristopi v R/projekt/projekt.R')
runApp()
runApp()
runApp()
?hist::title
??title
runApp()
runApp()
runApp()
?windowsFonts
runApp()
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
windowsFonts("Arial")
windowsFonts("Arial Black")
library(grDevices)
windowsFonts("Arial Black")
windowsFonts("Arial")
windowsFont("Arial")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
plotly::title
?plotly::title
??plotly::title
?plotly
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wellPanel
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
x<-price$`TodayChg(%)`
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(input$bins) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
runApp()
hist(x)$density
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
hist$density
runApp()
runApp()
runApp()
runApp()
runApp()
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability = TRUE,
main="",col = 'blue',border = 'white',ylab="gostota")
hist(x,probability = TRUE)$density
max(hist(x,probability = TRUE)$density)
x<-price$`TodayChg(%)`
max(density(x))
density(x)
density(x)$max
density(x)$y
max(density(x)$y)
runApp()
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(input$bins) + 1),probability=TRUE,
main="",plot=FALSE)
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="",plot=FALSE)
yhist
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
yhist
max(yhist(x)$density)
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
max(yhist(x)$density)
max(yhist$density)
runApp()
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="",plot=FALSE)
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,main="")
yhist
x<-price$`TodayChg(%)`
max(density)
max(density$y)
density(x)
hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,
main="")
hist$count
hist$counts
yhist<-hist(x,breaks = seq(min(x), max(x), length.out = as.integer(10) + 1),probability=TRUE,main="")
yhist$counts
yhist$density
max(density(x)y)
max(density(x)$y)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wellPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?helpText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
runApp()
runApp()
shiny::runApp('G:/VID/fmf/napredni pristopi v R/vaja2')
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
runApp()
?abline
runApp()
runApp()
runApp()
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp('G:/VID/fmf/3.letnik/podatkovne baze/Profit/4. shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
price$`TodayChg(%)`[AAL]
price$`TodayChg(%)`["AAL"]
which("ALL")
which(price$`TodayChg(%)`=="ALL")
which(price$`TodayChg(%)`==ALL)
which(price$`TodayChg(%)`==AAL)
which(price$Epic=="AAL"")
which(price$Epic=="AAL")
price$`TodayChg(%)`[which(price$Epic=="AAL")]
price$`TodayChg(%)`[which(price$Epic==c("AAL",AV.)]
price$`TodayChg(%)`[which(price$Epic==c("AAL","AV.)]
price$`TodayChg(%)`[which(price$Epic==c("AAL","AV".)]
price$`TodayChg(%)`[which(price$Epic==c("AAL","AV".)]
price$`TodayChg(%)`[which(price$Epic==c("AAL","AV.")]
which(price$Epic==c("AAL","AV."))
price$`TodayChg(%)`$"AAL"
price$`TodayChg(%)`["AAL"]
price$`TodayChg(%)`[price$Epic=="AAL"]
runApp()
which(price$Epic=="AAL")
runApp()
runApp()
a<-c()
for(i in 1:100){
a<-c()
for(i in 1:100){
a<-c(a,whic(price$Epic=="AAL"))}
a<-c()
for(i in 1:100){
a<-c(a,which(price$Epic=="AAL"))}
a
a<-c()
for(i in input$podjetja){
a<-c(a,which(price$Epic==i))
}
shiny::runApp()
tab<- price %>% filter(Epic %in% c("AAL","AV."))
tab
tab$`TodayChg(%)`
runApp()
runApp()
price %>% filter(Epic %in% c("AAL,AV."))
price %>% filter(Epic %in% c("AAL","AV."))
price %>% filter(Epic=="AAL"
)
head(price$`TodayChg(%)`)
tab$`TodayChg(%)`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
